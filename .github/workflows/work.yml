name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - crm_api_nodejs_v2  # Cambia esto por la rama que estés utilizando

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Paso para hacer checkout del código del repositorio
      - name: Check out the repository
        uses: actions/checkout@v2

      # Paso para configurar la versión de Node.js usando setup-node para instalación inicial
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'  # Cambia esto por la versión de Node.js que estás utilizando

      # Paso para instalar las dependencias de Node.js
      - name: Install dependencies
        run: npm install
        env:
          TOKEN_ACCESS: ${{ secrets.TOKEN_ACCESS }}  # Pasar el secreto como variable de entorno

      # Paso de depuración para verificar que el secreto se pasa correctamente
      - name: Verify TOKEN_ACCESS environment variable
        run: |
          if [ -z "$TOKEN_ACCESS" ]; then
            echo "TOKEN_ACCESS is not set"
            exit 1
          else
            echo "TOKEN_ACCESS is set correctly"
          fi
        env:
          TOKEN_ACCESS: ${{ secrets.TOKEN_ACCESS }}  # Asegúrate de que el secreto esté disponible como variable de entorno

      # Paso para cargar 'nvm', usar la versión correcta de Node.js y reiniciar la aplicación con PM2
      - name: Restart application with PM2
        run: |
          # Cargar 'nvm' (Node Version Manager) y establecer la versión correcta de Node.js
          export NVM_DIR="$HOME/.nvm"  # Establece el directorio donde está instalado nvm
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # Carga nvm si está disponible
          nvm use 18  # Cambia a la versión 18 de Node.js para asegurarse de que PM2 use la versión correcta
          
          # Reiniciar la aplicación en PM2 utilizando la ruta completa correcta
          /home/ubuntu/.nvm/versions/node/v18.17.1/bin/pm2 restart 1  # Reinicia la aplicación con el ID 1 en PM2
